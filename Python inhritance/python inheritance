class Animal:
    """
    A base class representing a generic animal.
    """
    def _init_(self, name):
        self.name = name

    def make_sound(self):
        """
        A generic method for an animal to make a sound.
        """
        return f"{self.name} makes a generic animal sound."

class Dog(Animal):
    """
    A derived class representing a dog, inheriting from Animal.
    """
    def _init_(self, name, breed):
        super()._init_(name)  # Call the parent class's constructor
        self.breed = breed

    def make_sound(self):
        """
        Overrides the make_sound method to provide a dog-specific sound.
        """
        return f"{self.name} the {self.breed} says Woof! Woof!"

class Cat(Animal):
    """
    A derived class representing a cat, inheriting from Animal.
    """
    def _init_(self, name, color):
        super()._init_(name)
        self.color = color

    def make_sound(self):
        """
        Overrides the make_sound method to provide a cat-specific sound.
        """
        return f"{self.name} the {self.color} cat says Meow!"

# Create instances of the classes
generic_animal = Animal("Creature")
my_dog = Dog("Buddy", "Golden Retriever")
my_cat = Cat("Whiskers", "Tabby")

# Demonstrate method calls:
print(generic_animal.make_sound())
print(my_dog.make_sound())
print(my_cat.make_sound())
